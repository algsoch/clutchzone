name: Deploy to Digital Ocean

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.digitalocean.com/clutchzone
  IMAGE_NAME: clutchzone-api

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ -v

    - name: Build Docker image
      run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Build Docker image
      run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

    - name: Log in to DigitalOcean Container Registry
      run: doctl registry login --expiry-seconds 1200

    - name: Push image to DigitalOcean Container Registry
      run: |
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DROPLET_IP }}
        username: root
        key: ${{ secrets.DROPLET_SSH_KEY }}
        script: |
          # Stop existing containers
          cd /opt/clutchzone
          docker-compose down
          
          # Pull latest changes
          git pull origin main
          
          # Set environment variables
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" > .env
          echo "DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}" >> .env
          echo "DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}" >> .env
          
          # Pull new image
          doctl registry login --expiry-seconds 1200
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Start services
          docker-compose up -d
          
          # Clean up old images
          docker system prune -af

    - name: Health Check
      run: |
        sleep 30
        curl -f http://${{ secrets.DROPLET_IP }}/api/health || exit 1

    - name: Notify Discord
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          STATUS="‚úÖ SUCCESS"
          COLOR="65280"
        else
          STATUS="‚ùå FAILURE"
          COLOR="16711680"
        fi
        
        curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d "{
            \"embeds\": [{
              \"title\": \"üöÄ ClutchZone Deployment\",
              \"description\": \"Deployment to Digital Ocean completed\",
              \"color\": $COLOR,
              \"fields\": [
                {\"name\": \"Status\", \"value\": \"$STATUS\", \"inline\": true},
                {\"name\": \"Commit\", \"value\": \"${{ github.sha }}\", \"inline\": true},
                {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true}
              ],
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
            }]
          }"
